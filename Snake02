//Recordemos que las reglas anteriores aún aplican: no puede desplazarse "hacia atrás".
package arrays;

public class Snake {

	// se considera un Snake que ocupa un solo casillero del mapa
	private int x, y;
	private boolean estaViva = true;
	private Mapa mapa;
	private Direccion ultimoMovimiento = Direccion.ARRIBA; //atributo extra
	
	/**
	 * Recibe mapa y posición inicial. El mapa contiene posiciones previamente
	 * ocupadas
	 */
	public Snake(Mapa mapa, int x, int y) {
		this.mapa = mapa;
		this.x = x;
		this.y = y;
	}

	/**
	 * @pre debe estar viva
	 * @post si el movimiento es posible, debe desplazarse
	 * @post debe morir si tal desplazamiento no es compatible o si la posición
	 *       está ocupada
	 * @post debe actualizar el mapa en todos los casos
	 * @param direccion
	 *            , la dirección hacia la que debe moverse
	 */

	public void desplazarseHacia(Direccion direccion) { //No es muy largo..
		if (!isViva()) {
			throw new Error("Snake muerta");
		}else{
			if(direccion == Direccion.ARRIBA && this.ultimoMovimiento == Direccion.ABAJO || 
					direccion == Direccion.ABAJO && this.ultimoMovimiento == Direccion.ARRIBA ||
					direccion == Direccion.DERECHA && this.ultimoMovimiento == Direccion.IZQUIERDA ||
					direccion == Direccion.IZQUIERDA && this.ultimoMovimiento == Direccion.DERECHA)
				throw new Error("Movimiento invalido");
			if (direccion == Direccion.ARRIBA && this.ultimoMovimiento != Direccion.ABAJO){
				if ((getY() == 0) || mapa.estaOcupado(getX(), getY() - 1)) {
					estaViva = false;
				} else {
					mapa.desocupar(getX(), getY());
					y = y - 1;
					mapa.ocupar(getX(), getY());
				}
				this.ultimoMovimiento = Direccion.ARRIBA;
			}
			if (direccion == Direccion.ABAJO && this.ultimoMovimiento != Direccion.ARRIBA){
				if (mapa.estaOcupado(getX(), getY() + 1)) {
					estaViva = false;
				} else {
					mapa.desocupar(getX(), getY());
					y = y + 1;
					mapa.ocupar(getX(), getY());
				}
				this.ultimoMovimiento = Direccion.ABAJO;
			}
			if (direccion == Direccion.DERECHA && this.ultimoMovimiento != Direccion.IZQUIERDA) {
				if (mapa.estaOcupado(getX() + 1, getY())) {
					estaViva = false;
				} else {
					mapa.desocupar(getX(), getY());
					y = y - 1;
					mapa.ocupar(getX(), getY());
				}
				this.ultimoMovimiento = Direccion.DERECHA;
			}
			if (direccion == Direccion.IZQUIERDA && this.ultimoMovimiento != Direccion.DERECHA) {
				if ((getX() == 0) || mapa.estaOcupado(getX() - 1, getY())) {
					estaViva = false;
				} else {
					mapa.desocupar(getX(), getY());
					x = x - 1;
					mapa.ocupar(getX(), getY());
				}
				this.ultimoMovimiento = Direccion.IZQUIERDA;
			}
		}
	}

	public int getX() {
		return this.x;
	}

	public int getY() {
		return this.y;
	}

	public boolean isViva() {
		return this.estaViva;
	}
}

enum Direccion {
	ARRIBA, ABAJO, IZQUIERDA, DERECHA
}

//completar PRE y POST
class Mapa {
	private boolean[][] ocupados;
	
	public Mapa(int ancho, int alto) {
		ocupados = new boolean[ancho + 1][alto + 1];
		for (int i = 0; i < ocupados.length; i++) {
			ocupar(i, ocupados[i].length - 1);
		}
		
		for (int i = 0; i < ocupados[0].length; i++) {
			ocupar(ocupados.length - 1, i);
		}
	}

	public boolean estaOcupado(int x, int y) {
		if (ocupados[x][y]) {
			return true;
		} else {
			return false;
		}
	}

	public void ocupar(int x, int y) {
		if(!estaOcupado(x, y))
			ocupados[x][y] = true;
	}

	public void desocupar(int x, int y) {
		if(estaOcupado(x, y))
			ocupados[x][y] = false;
	}
}
