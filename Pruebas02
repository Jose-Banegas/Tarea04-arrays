package arrays;

import org.junit.Test;
import org.junit.Assert;
public class Pruebas {
	
	@Test
	public void muertePorBordeArribaEn8x8() {
		Mapa mapa = new Mapa(8,8);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.ARRIBA);
		snake.desplazarseHacia(Direccion.ARRIBA);
		snake.desplazarseHacia(Direccion.ARRIBA);
		snake.desplazarseHacia(Direccion.ARRIBA);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void muertePorBordeAbajoEn5x5() {
		Mapa mapa = new Mapa(5,5);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		snake.desplazarseHacia(Direccion.ABAJO);
		snake.desplazarseHacia(Direccion.ABAJO);
		snake.desplazarseHacia(Direccion.ABAJO);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void muertePorBordeIzquierdoEn5x3() {
		Mapa mapa = new Mapa(5,3);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void muertePorBordeIzquierdoEn4x3() {
		Mapa mapa = new Mapa(4,3);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void muertePorBordeDerechoEn5x3() {
		Mapa mapa = new Mapa(5,3);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.DERECHA);
		snake.desplazarseHacia(Direccion.DERECHA);
		snake.desplazarseHacia(Direccion.DERECHA);
		snake.desplazarseHacia(Direccion.DERECHA);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test
	public void muertePorObstaculoArribaEn8x8() {
		Mapa mapa = new Mapa(8,8);
		mapa.ocupar(2, 2);
		Snake snake = new Snake(mapa, 2, 3);
		snake.desplazarseHacia(Direccion.ARRIBA);

		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void movimientoInvalidoAbajoEn8x8() {
		Mapa mapa = new Mapa(8,8);
		Snake snake = new Snake(mapa, 2, 3);
		mapa.ocupar(2, 6);
		snake.desplazarseHacia(Direccion.ABAJO);

		Assert.assertFalse(snake.isViva());
	}
	
	@Test
	public void muertePorObstaculoAbajoEn8x8() {
		Mapa mapa = new Mapa(8,8);
		Snake snake = new Snake(mapa, 2, 3);
		mapa.ocupar(3, 6);
		snake.desplazarseHacia(Direccion.DERECHA);
		snake.desplazarseHacia(Direccion.ABAJO);
		snake.desplazarseHacia(Direccion.ABAJO);
		snake.desplazarseHacia(Direccion.ABAJO);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test
	public void muertePorObstaculoIzquierdaEn8x8() {
		Mapa mapa = new Mapa(8,8);
		Snake snake = new Snake(mapa, 2, 3);
		mapa.ocupar(1, 3);
		snake.desplazarseHacia(Direccion.IZQUIERDA);
	
		Assert.assertFalse(snake.isViva());
	}
	
	@Test
	public void muertePorObstaculoDerechaEn8x8() {
		Mapa mapa = new Mapa(8,8);
		Snake snake = new Snake(mapa, 2, 3);
		mapa.ocupar(3, 3);
		snake.desplazarseHacia(Direccion.DERECHA);
	
		Assert.assertFalse(snake.isViva());
	}
	
	@Test(expected = Error.class)
	public void muertePorCasilleroYaOcupadoInit() {
		Mapa mapa = new Mapa(7,7);
		mapa.ocupar(3, 3);
		Snake snake = new Snake(mapa, 3, 3);
		
		Assert.assertFalse(snake.isViva());
	}
	
	@Test
	public void imposibleOcupar() {
		Mapa mapa = new Mapa(7,7);
		Snake snake = new Snake(mapa, 3, 3);
		mapa.ocupar(3, 3);
		
		Assert.assertTrue(snake.isViva());
	}
}
